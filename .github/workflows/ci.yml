name: CI

on:
  pull_request:
    branches:
      - "**"
  workflow_call: # Needed to make this a reusable workflow for releasing artifacts https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_dispatch: # To allow starting the workflow manually in the web ui

permissions:
  contents: read

jobs:
  CI:
    strategy:
      matrix:
        platform: [ARM, X86]
    runs-on:
      - codebuild-${{ github.event.repository.name }}-${{ matrix.platform }}-Runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@446798f8213ac2e75931c1b0769676d927801858 # v2.10.3
        with:
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      # Prepare build dependencies
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 16.16.0
      - name: Yum Update
        run: sudo yum update -y
      - name: Install gcc
        run: sudo yum install -y "@Development Tools"
      - name: Install musl
        env:
          MUSL_VERSION: musl-1.2.5
        run: |
          curl https://musl.libc.org/releases/$MUSL_VERSION.tar.gz -o $MUSL_VERSION.tar.gz
          curl https://musl.libc.org/releases/$MUSL_VERSION.tar.gz.asc -o $MUSL_VERSION.tar.gz.asc
          curl https://musl.libc.org/musl.pub -o musl.pub
          sudo yum install -y gnupg
          gpg --import musl.pub || true
          gpg --verify $MUSL_VERSION.tar.gz.asc $MUSL_VERSION.tar.gz
          tar -xvf $MUSL_VERSION.tar.gz
          cd $MUSL_VERSION
          ./configure --prefix=/opt/musl
          sudo make install
          cd .. && sudo rm -rf $MUSL_VERSION*
          if [ $(arch) = "aarch64" ]; then
            sudo ln -snf /opt/musl/bin/musl-gcc /usr/bin/aarch64-linux-musl-gcc
          else
            sudo ln -snf /opt/musl/bin/musl-gcc /usr/bin/musl-gcc
          fi
      - name: Install Hotline Dependencies
        run: |
          sudo yum install -y \
            elfutils-devel \
            elfutils-libelf-devel \
            capstone-devel \
            zlib-devel \
            xz-devel \
            bzip2-devel \
            libzstd-devel

      # Tests and static analysis
      - name: Set perf_event_paranoid to 0
        run: echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid
      - name: Run tests
        run: cargo test --verbose -- --nocapture --color always
      - name: Run clippy
        run: cargo clippy --all-targets
      - name: Run rustfmt
        run: cargo fmt --all -- --check

      # Build and upload release artifacts
      - name: Build release artifacts
        run: |
          rustup target add $(arch)-unknown-linux-musl
          cargo build --release --target $(arch)-unknown-linux-musl

      # Is not published, but ensures that Hotline can be built
      # [hotline] tests will fail since it is not Graviton metal,
      # but they are graceful and the test suite should pass
      - name: Build and test dynamically linked artifacts
        run: |
          if [ $(arch) = "aarch64" ]; then
            cargo clippy --all-targets --features hotline
            cargo test --features hotline --verbose -- --nocapture --color always
          fi

      # Archive and upload artifacts
      - name: Ensure no runtime dependencies
        run: |
          ldd target/$(arch)-unknown-linux-musl/release/aperf 2>&1 | grep -E "not a dynamic executable|statically linked"
      - name: Archive release artifacts
        run: tar -zcvf artifacts.tar.gz -C target/$(arch)-unknown-linux-musl/release aperf
      - name: Upload x86_64 release artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.platform == 'X86' }}
        with:
          name: x86_64-release-artifacts
          path: artifacts.tar.gz
      - name: Upload aarch64 release artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.platform == 'ARM' }}
        with:
          name: aarch64-release-artifacts
          path: artifacts.tar.gz